# encoding: utf-8
"""
Created by misaka-10032 (longqic@andrew.cmu.edu).

TODO: purpose
"""

from solution import Solution
sol = Solution()


def test_0():
    assert sol.addOperators('', 2) == []
    assert sol.addOperators('2', 2) == ['2']
    assert sol.addOperators('11', 2) == ['1+1']
    assert sol.addOperators('11', 1) == ['1*1']
    assert sol.addOperators('11', 3) == []


def test_1():
    ans = sol.addOperators('123', 6)
    tgt = ['1+2+3', '1*2*3']
    assert sorted(ans) == sorted(tgt)

    ans = sol.addOperators('232', 8)
    tgt = ['2*3+2', '2+3*2']
    assert sorted(ans) == sorted(tgt)

    ans = sol.addOperators('105', 5)
    tgt = ['1*0+5', '10-5']
    assert sorted(ans) == sorted(tgt)

    ans = sol.addOperators('00', 0)
    tgt = ['0+0', '0-0', '0*0']
    assert sorted(ans) == sorted(tgt)


def test_2():
    ans = sol.addOperators('111111', 11112)
    tgt = ['1+11111', '11111+1']
    assert sorted(ans) == sorted(tgt)


def test_3():
    ans = sol.addOperators("123456789", 45)
    tgt = ["1*2*3*4*5-6-78+9", "1*2*3*4+5+6-7+8+9",
           "1*2*3+4+5+6+7+8+9", "1*2*3+4+5-6*7+8*9",
           "1*2*3+4-5*6+7*8+9", "1*2*3+4-5*6-7+8*9",
           "1*2*3-4*5+6*7+8+9", "1*2*3-4*5-6+7*8+9",
           "1*2*3-4*5-6-7+8*9", "1*2*3-45+67+8+9",
           "1*2*34+56-7-8*9", "1*2*34-5+6-7-8-9",
           "1*2+3*4-56+78+9", "1*2+3+4+5*6+7+8-9",
           "1*2+3+4-5+6*7+8-9", "1*2+3+4-5-6+7*8-9",
           "1*2+3+45+67-8*9", "1*2+3-45+6+7+8*9",
           "1*2+34+5-6-7+8+9", "1*2+34+56-7*8+9",
           "1*2+34-5+6+7-8+9", "1*2+34-56+7*8+9",
           "1*2+34-56-7+8*9", "1*2-3*4+5+67-8-9",
           "1*2-3+4-5-6*7+89", "1*2-3-4*5+67+8-9",
           "1*2-3-4+56-7-8+9", "1*2-34+5*6+7*8-9",
           "1*23+4*5-6+7-8+9", "1*23-4-56-7+89",
           "1+2*3*4*5+6+7-89", "1+2*3*4+5*6+7-8-9",
           "1+2*3*4-5+6*7-8-9", "1+2*3+4*5*6+7-89",
           "1+2*3+4*5-6+7+8+9", "1+2*3-4-5-6*7+89",
           "1+2*34-5*6+7+8-9", "1+2+3*4*5+6-7-8-9",
           "1+2+3*4+5+6*7-8-9", "1+2+3*45-6-78-9",
           "1+2+3+4+5+6+7+8+9", "1+2+3+4+5-6*7+8*9",
           "1+2+3+4-5*6+7*8+9", "1+2+3+4-5*6-7+8*9",
           "1+2+3-4*5+6*7+8+9", "1+2+3-4*5-6+7*8+9",
           "1+2+3-4*5-6-7+8*9", "1+2+3-45+67+8+9",
           "1+2-3*4*5+6+7+89", "1+2-3*4+5*6+7+8+9",
           "1+2-3*4-5+6*7+8+9", "1+2-3*4-5-6+7*8+9",
           "1+2-3*4-5-6-7+8*9", "1+2-3+4*5+6*7-8-9",
           "1+2-3+45+6-7-8+9", "1+2-3+45-6+7+8-9",
           "1+2-3-4-5*6+7+8*9", "1+2-3-45-6+7+89",
           "1+2-34+5+6+7*8+9", "1+2-34+5+6-7+8*9",
           "1+2-34-5-6+78+9", "1+23*4+5-6-7*8+9",
           "1+23*4-5-6*7+8-9", "1+23*4-56+7-8+9",
           "1+23+4+5+6+7+8-9", "1+23+4-5*6+7*8-9",
           "1+23+4-5-67+89", "1+23-4*5+6*7+8-9",
           "1+23-4*5-6+7*8-9", "1+23-4-5+6+7+8+9",
           "1+23-4-5-6*7+8*9", "1+23-45+67+8-9",
           "1-2*3*4+5-6+78-9", "1-2*3*4-5-6+7+8*9",
           "1-2*3+4*5+6+7+8+9", "1-2*3+4*5-6*7+8*9",
           "1-2*3+4+5+6*7+8-9", "1-2*3+4+5-6+7*8-9",
           "1-2*3+4+56+7-8-9", "1-2*3+45-67+8*9",
           "1-2*3-4+5*6+7+8+9", "1-2*3-4-5+6*7+8+9",
           "1-2*3-4-5-6+7*8+9", "1-2*3-4-5-6-7+8*9",
           "1-2*34+5*6-7+89", "1-2+3*4*5-6-7+8-9",
           "1-2+3+4-5*6+78-9", "1-2+3+45+6-7+8-9",
           "1-2+3-4*5-6+78-9", "1-2+3-45+6-7+89",
           "1-2-3*4+5+6+7*8-9", "1-2-3*4-5-6+78-9",
           "1-2-3+4-5+67-8-9", "1-2-3+45-6-7+8+9",
           "1-2-34+5+6+78-9", "1-2-34+56+7+8+9",
           "1-2-34-5+6+7+8*9", "1-23*4+5+6*7+89",
           "1-23+4*5-6*7+89", "1-23+4-5+67-8+9",
           "1-23+45-67+89", "1-23-4+5+67+8-9",
           "1-23-4-5-6-7+89", "12*3*4-5*6-78+9",
           "12*3+4+5+6-7-8+9", "12*3+4+5-6+7+8-9",
           "12*3-4-5-6+7+8+9", "12*3-4-56+78-9",
           "12+3*4+5+6-7+8+9", "12+3*45-6-7-89",
           "12+3+4-56-7+89", "12+3-4*5+67-8-9",
           "12+3-45+6+78-9", "12+34-5-6-7+8+9",
           "12-3*4*5+6+78+9", "12-3*4-5+67-8-9",
           "12-3+4*5+6-7+8+9", "12-3+4+56-7-8-9",
           "12-3-4+5*6-7+8+9", "12-3-4-56+7+89",
           "12-3-45-6+78+9"]
    assert sorted(ans) == sorted(tgt)
